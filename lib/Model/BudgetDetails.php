<?php
/**
 * BudgetDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * BudgetDetails Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BudgetDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frequency_unit' => 'string',
        'end_date' => '\DateTime',
        'client_id' => 'string',
        'budget' => '\com\hydrogen\proton\Model\BudgetComponent[]',
        'total_value' => 'float',
        'account_id' => 'string',
        'aggregation_accounts' => '\com\hydrogen\proton\Model\BudgetAggregationAccount[]',
        'currency_code' => 'string',
        'frequency' => 'int',
        'start_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'frequency_unit' => null,
        'end_date' => 'date',
        'client_id' => 'uuid',
        'budget' => null,
        'total_value' => 'float',
        'account_id' => 'uuid',
        'aggregation_accounts' => null,
        'currency_code' => null,
        'frequency' => 'int32',
        'start_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'frequency_unit' => 'frequency_unit',
        'end_date' => 'end_date',
        'client_id' => 'client_id',
        'budget' => 'budget',
        'total_value' => 'total_value',
        'account_id' => 'account_id',
        'aggregation_accounts' => 'aggregation_accounts',
        'currency_code' => 'currency_code',
        'frequency' => 'frequency',
        'start_date' => 'start_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'frequency_unit' => 'setFrequencyUnit',
        'end_date' => 'setEndDate',
        'client_id' => 'setClientId',
        'budget' => 'setBudget',
        'total_value' => 'setTotalValue',
        'account_id' => 'setAccountId',
        'aggregation_accounts' => 'setAggregationAccounts',
        'currency_code' => 'setCurrencyCode',
        'frequency' => 'setFrequency',
        'start_date' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'frequency_unit' => 'getFrequencyUnit',
        'end_date' => 'getEndDate',
        'client_id' => 'getClientId',
        'budget' => 'getBudget',
        'total_value' => 'getTotalValue',
        'account_id' => 'getAccountId',
        'aggregation_accounts' => 'getAggregationAccounts',
        'currency_code' => 'getCurrencyCode',
        'frequency' => 'getFrequency',
        'start_date' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FREQUENCY_UNIT_DAILY = 'daily';
    const FREQUENCY_UNIT_WEEKLY = 'weekly';
    const FREQUENCY_UNIT_BI_WEEKLY = 'bi-weekly';
    const FREQUENCY_UNIT_MONTHLY = 'monthly';
    const FREQUENCY_UNIT_QUARTERLY = 'quarterly';
    const FREQUENCY_UNIT_ANNUALLY = 'annually';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyUnitAllowableValues()
    {
        return [
            self::FREQUENCY_UNIT_DAILY,
            self::FREQUENCY_UNIT_WEEKLY,
            self::FREQUENCY_UNIT_BI_WEEKLY,
            self::FREQUENCY_UNIT_MONTHLY,
            self::FREQUENCY_UNIT_QUARTERLY,
            self::FREQUENCY_UNIT_ANNUALLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frequency_unit'] = isset($data['frequency_unit']) ? $data['frequency_unit'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['total_value'] = isset($data['total_value']) ? $data['total_value'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['aggregation_accounts'] = isset($data['aggregation_accounts']) ? $data['aggregation_accounts'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : 1;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['frequency_unit'] === null) {
            $invalidProperties[] = "'frequency_unit' can't be null";
        }
        $allowedValues = $this->getFrequencyUnitAllowableValues();
        if (!is_null($this->container['frequency_unit']) && !in_array($this->container['frequency_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['total_value']) && ($this->container['total_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_value', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['frequency']) && ($this->container['frequency'] < 1)) {
            $invalidProperties[] = "invalid value for 'frequency', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets frequency_unit
     *
     * @return string
     */
    public function getFrequencyUnit()
    {
        return $this->container['frequency_unit'];
    }

    /**
     * Sets frequency_unit
     *
     * @param string $frequency_unit frequency_unit
     *
     * @return $this
     */
    public function setFrequencyUnit($frequency_unit)
    {
        $allowedValues = $this->getFrequencyUnitAllowableValues();
        if (!in_array($frequency_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency_unit'] = $frequency_unit;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return \com\hydrogen\proton\Model\BudgetComponent[]
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param \com\hydrogen\proton\Model\BudgetComponent[] $budget budget
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets total_value
     *
     * @return float
     */
    public function getTotalValue()
    {
        return $this->container['total_value'];
    }

    /**
     * Sets total_value
     *
     * @param float $total_value total_value
     *
     * @return $this
     */
    public function setTotalValue($total_value)
    {

        if (!is_null($total_value) && ($total_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_value when calling BudgetDetails., must be bigger than or equal to 0.');
        }

        $this->container['total_value'] = $total_value;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets aggregation_accounts
     *
     * @return \com\hydrogen\proton\Model\BudgetAggregationAccount[]
     */
    public function getAggregationAccounts()
    {
        return $this->container['aggregation_accounts'];
    }

    /**
     * Sets aggregation_accounts
     *
     * @param \com\hydrogen\proton\Model\BudgetAggregationAccount[] $aggregation_accounts aggregation_accounts
     *
     * @return $this
     */
    public function setAggregationAccounts($aggregation_accounts)
    {
        $this->container['aggregation_accounts'] = $aggregation_accounts;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {

        if (!is_null($frequency) && ($frequency < 1)) {
            throw new \InvalidArgumentException('invalid value for $frequency when calling BudgetDetails., must be bigger than or equal to 1.');
        }

        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


