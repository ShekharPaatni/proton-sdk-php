<?php
/**
 * BusinessInvoiceAnalysisRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.8.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * BusinessInvoiceAnalysisRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessInvoiceAnalysisRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'businessInvoiceAnalysisRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_id' => 'string',
        'end_date' => '\DateTime',
        'overdue_periods' => '\com\hydrogen\proton\Model\Periods[]',
        'client_id' => 'string',
        'response_limit' => 'int',
        'currency_conversion' => 'string',
        'history_frequency_interval' => 'string',
        'start_date' => '\DateTime',
        'show_history' => 'bool',
        'currency_code' => 'string',
        'invoice_ids' => 'string[]',
        'show_outstanding_invoices' => 'bool',
        'future_due_periods' => '\com\hydrogen\proton\Model\Periods[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_id' => 'uuid',
        'end_date' => 'date',
        'overdue_periods' => null,
        'client_id' => 'uuid',
        'response_limit' => 'int32',
        'currency_conversion' => null,
        'history_frequency_interval' => null,
        'start_date' => 'date',
        'show_history' => null,
        'currency_code' => null,
        'invoice_ids' => 'uuid',
        'show_outstanding_invoices' => null,
        'future_due_periods' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customer_id',
        'end_date' => 'end_date',
        'overdue_periods' => 'overdue_periods',
        'client_id' => 'client_id',
        'response_limit' => 'response_limit',
        'currency_conversion' => 'currency_conversion',
        'history_frequency_interval' => 'history_frequency_interval',
        'start_date' => 'start_date',
        'show_history' => 'show_history',
        'currency_code' => 'currency_code',
        'invoice_ids' => 'invoice_ids',
        'show_outstanding_invoices' => 'show_outstanding_invoices',
        'future_due_periods' => 'future_due_periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'end_date' => 'setEndDate',
        'overdue_periods' => 'setOverduePeriods',
        'client_id' => 'setClientId',
        'response_limit' => 'setResponseLimit',
        'currency_conversion' => 'setCurrencyConversion',
        'history_frequency_interval' => 'setHistoryFrequencyInterval',
        'start_date' => 'setStartDate',
        'show_history' => 'setShowHistory',
        'currency_code' => 'setCurrencyCode',
        'invoice_ids' => 'setInvoiceIds',
        'show_outstanding_invoices' => 'setShowOutstandingInvoices',
        'future_due_periods' => 'setFutureDuePeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'end_date' => 'getEndDate',
        'overdue_periods' => 'getOverduePeriods',
        'client_id' => 'getClientId',
        'response_limit' => 'getResponseLimit',
        'currency_conversion' => 'getCurrencyConversion',
        'history_frequency_interval' => 'getHistoryFrequencyInterval',
        'start_date' => 'getStartDate',
        'show_history' => 'getShowHistory',
        'currency_code' => 'getCurrencyCode',
        'invoice_ids' => 'getInvoiceIds',
        'show_outstanding_invoices' => 'getShowOutstandingInvoices',
        'future_due_periods' => 'getFutureDuePeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HISTORY_FREQUENCY_INTERVAL_DAY = 'day';
    const HISTORY_FREQUENCY_INTERVAL_WEEK = 'week';
    const HISTORY_FREQUENCY_INTERVAL_MONTH = 'month';
    const HISTORY_FREQUENCY_INTERVAL_QUARTER = 'quarter';
    const HISTORY_FREQUENCY_INTERVAL_YEAR = 'year';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHistoryFrequencyIntervalAllowableValues()
    {
        return [
            self::HISTORY_FREQUENCY_INTERVAL_DAY,
            self::HISTORY_FREQUENCY_INTERVAL_WEEK,
            self::HISTORY_FREQUENCY_INTERVAL_MONTH,
            self::HISTORY_FREQUENCY_INTERVAL_QUARTER,
            self::HISTORY_FREQUENCY_INTERVAL_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['overdue_periods'] = isset($data['overdue_periods']) ? $data['overdue_periods'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['response_limit'] = isset($data['response_limit']) ? $data['response_limit'] : 10;
        $this->container['currency_conversion'] = isset($data['currency_conversion']) ? $data['currency_conversion'] : null;
        $this->container['history_frequency_interval'] = isset($data['history_frequency_interval']) ? $data['history_frequency_interval'] : 'month';
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['show_history'] = isset($data['show_history']) ? $data['show_history'] : false;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['invoice_ids'] = isset($data['invoice_ids']) ? $data['invoice_ids'] : null;
        $this->container['show_outstanding_invoices'] = isset($data['show_outstanding_invoices']) ? $data['show_outstanding_invoices'] : false;
        $this->container['future_due_periods'] = isset($data['future_due_periods']) ? $data['future_due_periods'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['response_limit']) && ($this->container['response_limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'response_limit', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getHistoryFrequencyIntervalAllowableValues();
        if (!is_null($this->container['history_frequency_interval']) && !in_array($this->container['history_frequency_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'history_frequency_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets overdue_periods
     *
     * @return \com\hydrogen\proton\Model\Periods[]
     */
    public function getOverduePeriods()
    {
        return $this->container['overdue_periods'];
    }

    /**
     * Sets overdue_periods
     *
     * @param \com\hydrogen\proton\Model\Periods[] $overdue_periods overdue_periods
     *
     * @return $this
     */
    public function setOverduePeriods($overdue_periods)
    {
        $this->container['overdue_periods'] = $overdue_periods;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets response_limit
     *
     * @return int
     */
    public function getResponseLimit()
    {
        return $this->container['response_limit'];
    }

    /**
     * Sets response_limit
     *
     * @param int $response_limit response_limit
     *
     * @return $this
     */
    public function setResponseLimit($response_limit)
    {

        if (!is_null($response_limit) && ($response_limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $response_limit when calling BusinessInvoiceAnalysisRequest., must be bigger than or equal to 1.');
        }

        $this->container['response_limit'] = $response_limit;

        return $this;
    }

    /**
     * Gets currency_conversion
     *
     * @return string
     */
    public function getCurrencyConversion()
    {
        return $this->container['currency_conversion'];
    }

    /**
     * Sets currency_conversion
     *
     * @param string $currency_conversion currency_conversion
     *
     * @return $this
     */
    public function setCurrencyConversion($currency_conversion)
    {
        $this->container['currency_conversion'] = $currency_conversion;

        return $this;
    }

    /**
     * Gets history_frequency_interval
     *
     * @return string
     */
    public function getHistoryFrequencyInterval()
    {
        return $this->container['history_frequency_interval'];
    }

    /**
     * Sets history_frequency_interval
     *
     * @param string $history_frequency_interval history_frequency_interval
     *
     * @return $this
     */
    public function setHistoryFrequencyInterval($history_frequency_interval)
    {
        $allowedValues = $this->getHistoryFrequencyIntervalAllowableValues();
        if (!is_null($history_frequency_interval) && !in_array($history_frequency_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'history_frequency_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['history_frequency_interval'] = $history_frequency_interval;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets show_history
     *
     * @return bool
     */
    public function getShowHistory()
    {
        return $this->container['show_history'];
    }

    /**
     * Sets show_history
     *
     * @param bool $show_history show_history
     *
     * @return $this
     */
    public function setShowHistory($show_history)
    {
        $this->container['show_history'] = $show_history;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets invoice_ids
     *
     * @return string[]
     */
    public function getInvoiceIds()
    {
        return $this->container['invoice_ids'];
    }

    /**
     * Sets invoice_ids
     *
     * @param string[] $invoice_ids invoice_ids
     *
     * @return $this
     */
    public function setInvoiceIds($invoice_ids)
    {
        $this->container['invoice_ids'] = $invoice_ids;

        return $this;
    }

    /**
     * Gets show_outstanding_invoices
     *
     * @return bool
     */
    public function getShowOutstandingInvoices()
    {
        return $this->container['show_outstanding_invoices'];
    }

    /**
     * Sets show_outstanding_invoices
     *
     * @param bool $show_outstanding_invoices show_outstanding_invoices
     *
     * @return $this
     */
    public function setShowOutstandingInvoices($show_outstanding_invoices)
    {
        $this->container['show_outstanding_invoices'] = $show_outstanding_invoices;

        return $this;
    }

    /**
     * Gets future_due_periods
     *
     * @return \com\hydrogen\proton\Model\Periods[]
     */
    public function getFutureDuePeriods()
    {
        return $this->container['future_due_periods'];
    }

    /**
     * Sets future_due_periods
     *
     * @param \com\hydrogen\proton\Model\Periods[] $future_due_periods future_due_periods
     *
     * @return $this
     */
    public function setFutureDuePeriods($future_due_periods)
    {
        $this->container['future_due_periods'] = $future_due_periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


